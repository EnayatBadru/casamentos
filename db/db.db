--USERS
--Armazena informações sobre os noivos e noivas.

CREATE TABLE Users (
    UserID INT PRIMARY KEY AUTO_INCREMENT,
    Username VARCHAR(255) NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Email VARCHAR(255) NOT NULL,
    -- Outras informações pessoais
);


--CONVIDADOS
--Armazena informações sobre os convidados e seus relacionamentos com os noivos.

CREATE TABLE Guests (
    GuestID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    Name VARCHAR(255) NOT NULL,
    Email VARCHAR(255),
    Phone VARCHAR(15),
    Relationship VARCHAR(100),
    RSVPStatus ENUM('Confirmado', 'Pendente', 'Recusado'),
    -- Outras informações dos convidados
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

--LOCAL E DATA
--Armazena informações sobre o local e a data do casamento.

CREATE TABLE WeddingEvents (
    EventID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    EventName VARCHAR(255),
    EventDate DATE,
    EventLocation VARCHAR(255),
    -- Outras informações sobre o evento
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);


--PRODUTOS E SERVICOES
--Armazena informações sobre produtos e serviços relacionados ao casamento.

CREATE TABLE WeddingServices (
    ServiceID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    ServiceName VARCHAR(255) NOT NULL,
    Description TEXT,
    Price DECIMAL(10, 2),
    PaymentStatus ENUM('Pago', 'Pendente'),
    EventID INT,
    -- Outras informações sobre o serviço
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (EventID) REFERENCES WeddingEvents(EventID)
);


--TAREFAS E CRONOGRAMA
--Armazena informações sobre tarefas e cronograma do casamento.

CREATE TABLE WeddingTasks (
    TaskID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    TaskName VARCHAR(255) NOT NULL,
    Deadline DATE,
    EventID INT,
    -- Outras informações sobre a tarefa
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (EventID) REFERENCES WeddingEvents(EventID)
);

--TRANSACOES E PAGAMENTOS 
--Armazena informações sobre transações de pagamento, incluindo os serviços ou produtos pagos, a data do pagamento e o valor pago.

CREATE TABLE PaymentTransactions (
    TransactionID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    ServiceID INT, -- Referência ao serviço ou produto pago
    TransactionDate DATE,
    Amount DECIMAL(10, 2),
    PaymentMethod VARCHAR(50), -- Método de pagamento (cartão de crédito, transferência, etc.)
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (ServiceID) REFERENCES WeddingServices(ServiceID)
);





--COMANDOS SQL EXEMPLO

CREATE TABLE Produtos (
    ProdutoID INT PRIMARY KEY AUTO_INCREMENT,
    Nome VARCHAR(255) NOT NULL,
    Descricao TEXT,
    Preco DECIMAL(10, 2) NOT NULL
);

-- Inserir um novo produto
INSERT INTO Produtos (Nome, Descricao, Preco) VALUES ('Produto A', 'Descrição do Produto A', 19.99);

-- Consultar todos os produtos
SELECT * FROM Produtos;

-- Consultar um produto específico por ID
SELECT * FROM Produtos WHERE ProdutoID = 1;

-- Consultar produtos com preço superior a $15
SELECT * FROM Produtos WHERE Preco > 15.00;

-- Atualizar o preço de um produto com base no ID
UPDATE Produtos SET Preco = 24.99 WHERE ProdutoID = 1;

-- Excluir um produto com base no ID
DELETE FROM Produtos WHERE ProdutoID = 1;
